{
	"info": {
		"_postman_id": "c9b68415-7ddb-440f-b426-4c281bc8816d",
		"name": "Media Ratings Platform (MRP) Copy",
		"description": "Comprehensive API collection for testing the MRP REST endpoints with positive and negative test cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22837350"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register User - Valid Data",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"username\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									"pm.test(\"Response fields have correct types\", function () {",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.expect(jsonData.username).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Username matches request\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.username).to.equal(requestBody.username);",
									"});",
									"",
									"pm.test(\"ID is valid UUID format\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.id).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Success message is present\", function () {",
									"    pm.expect(jsonData.message).to.include(\"success\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser{{$timestamp}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user with valid username and password"
					},
					"response": []
				},
				{
					"name": "Register - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Missing Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register without providing a username"
					},
					"response": []
				},
				{
					"name": "Register - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Missing Password",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*required|required.*password/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register without providing a password"
					},
					"response": []
				},
				{
					"name": "Register - Short Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Short Username (less than 3 characters)",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions username length requirement\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*between.*3.*50|username.*3.*characters/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"ab\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with a username shorter than 3 characters"
					},
					"response": []
				},
				{
					"name": "Register - Short Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Short Password (less than 6 characters)",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions password length requirement\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*at least.*6|password.*6.*characters/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"validusername\",\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with a password shorter than 6 characters"
					},
					"response": []
				},
				{
					"name": "Register - Duplicate Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Duplicate Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions username already exists\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*already|already.*exists|duplicate/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with an existing username (testuser1 from init.sql)"
					},
					"response": []
				},
				{
					"name": "Register - Empty Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Empty Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates validation failure\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username|username.*between/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with an empty string as username"
					},
					"response": []
				},
				{
					"name": "Register - Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Invalid JSON",
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response indicates error\", function () {",
									"    // Server should return an error for malformed JSON",
									"    pm.expect(pm.response.code).to.be.above(399);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n    // missing closing brace"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with malformed JSON"
					},
					"response": []
				},
				{
					"name": "Login - Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Login - Valid Credentials",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData).to.have.property(\"username\");",
									"    pm.expect(jsonData).to.have.property(\"userId\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									"pm.test(\"Response fields have correct types\", function () {",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.expect(jsonData.username).to.be.a(\"string\");",
									"    pm.expect(jsonData.userId).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Token is not empty\", function () {",
									"    pm.expect(jsonData.token.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Token is valid UUID format\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.token).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Username matches request\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.username).to.equal(requestBody.username);",
									"});",
									"",
									"pm.test(\"UserId is valid UUID format\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.userId).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Success message is present\", function () {",
									"    pm.expect(jsonData.message.toLowerCase()).to.include(\"success\");",
									"});",
									"",
									"// Save token to collection variable for future requests",
									"if (jsonData.token) {",
									"    pm.collectionVariables.set(\"authToken\", jsonData.token);",
									"    pm.collectionVariables.set(\"userId\", jsonData.userId);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with valid credentials (testuser1 from init.sql)"
					},
					"response": []
				},
				{
					"name": "Login - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Wrong Password",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates invalid credentials\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/invalid.*username.*password|invalid.*credentials|authentication.*failed/);",
									"});",
									"",
									"pm.test(\"No token is returned\", function () {",
									"    pm.expect(jsonData).to.not.have.property(\"token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with correct username but wrong password"
					},
					"response": []
				},
				{
					"name": "Login - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Invalid Username",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates invalid credentials\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/invalid.*username.*password|invalid.*credentials|user.*not.*found/);",
									"});",
									"",
									"pm.test(\"No token is returned\", function () {",
									"    pm.expect(jsonData).to.not.have.property(\"token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser999\",\n    \"password\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with a username that doesn't exist"
					},
					"response": []
				},
				{
					"name": "Login - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Missing Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login without providing a username"
					},
					"response": []
				},
				{
					"name": "Login - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Missing Password",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*required|required.*password/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login without providing a password"
					},
					"response": []
				},
				{
					"name": "Login - Empty Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Empty Credentials",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*password.*required|required/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with empty strings for both username and password"
					},
					"response": []
				},
				{
					"name": "Login - Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Invalid JSON",
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response indicates error\", function () {",
									"    // Server should return an error for malformed JSON",
									"    pm.expect(pm.response.code).to.be.above(399);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\"\n    \"password\": \"test123\"\n    // missing comma"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with malformed JSON"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints with comprehensive positive and negative test cases"
		},
		{
			"name": "Media Management",
			"item": [
				{
					"name": "Get Media List - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON array\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Media items have required fields\", function () {",
									"        const media = jsonData[0];",
									"        pm.expect(media).to.have.property(\"id\");",
									"        pm.expect(media).to.have.property(\"title\");",
									"        pm.expect(media).to.have.property(\"mediaType\");",
									"        pm.expect(media).to.have.property(\"creatorUsername\");",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Get all media entries"
					},
					"response": []
				},
				{
					"name": "Get Media List - With Search Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Results contain search term in title\", function () {",
									"        jsonData.forEach(media => {",
									"            pm.expect(media.title.toLowerCase()).to.include(\"inception\".toLowerCase());",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media?search=inception",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "search",
									"value": "inception"
								}
							]
						},
						"description": "Search media by title"
					},
					"response": []
				},
				{
					"name": "Get Media List - With Type Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is array\", function () {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"All results are movies\", function () {",
									"        jsonData.forEach(media => {",
									"            pm.expect(media.mediaType).to.equal(\"movie\");",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media?type=movie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "type",
									"value": "movie"
								}
							]
						},
						"description": "Filter media by type"
					},
					"response": []
				},
				{
					"name": "Get Media List - With Sort by Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is array\", function () {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"if (jsonData.length > 1) {",
									"    pm.test(\"Results sorted by rating descending\", function () {",
									"        for (let i = 0; i < jsonData.length - 1; i++) {",
									"            pm.expect(jsonData[i].averageRating).to.be.at.least(jsonData[i + 1].averageRating);",
									"        }",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media?sort=rating",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "sort",
									"value": "rating"
								}
							]
						},
						"description": "Sort media by rating"
					},
					"response": []
				},
				{
					"name": "Get Media List - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions authentication\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/authentication|auth|unauthorized/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to get media without authentication"
					},
					"response": []
				},
				{
					"name": "Get Media List - Multiple Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response is array\", function () {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"if (jsonData.length > 0) {",
									"    pm.test(\"Results match all filters\", function () {",
									"        jsonData.forEach(media => {",
									"            pm.expect(media.mediaType).to.equal(\"movie\");",
									"            pm.expect(media.releaseYear).to.equal(2010);",
									"        });",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media?type=movie&year=2010",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "type",
									"value": "movie"
								},
								{
									"key": "year",
									"value": "2010"
								}
							]
						},
						"description": "Filter media with multiple parameters"
					},
					"response": []
				},
				{
					"name": "Get Media List - Invalid Year Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media?year=notanumber",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							],
							"query": [
								{
									"key": "year",
									"value": "notanumber"
								}
							]
						},
						"description": "Try filtering with invalid year format"
					},
					"response": []
				},
				{
					"name": "Create Media - Valid Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"mediaType\");",
									"    pm.expect(jsonData).to.have.property(\"creatorId\");",
									"});",
									"",
									"pm.test(\"ID is valid UUID\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.id).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Title matches request\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.title).to.equal(requestBody.title);",
									"});",
									"",
									"pm.test(\"Media type is movie\", function () {",
									"    pm.expect(jsonData.mediaType).to.equal(\"movie\");",
									"});",
									"",
									"// Save media ID for subsequent tests",
									"if (jsonData.id) {",
									"    pm.collectionVariables.set(\"testMediaId\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Movie {{$timestamp}}\",\n    \"description\": \"A test movie for API testing\",\n    \"mediaType\": \"movie\",\n    \"releaseYear\": 2023,\n    \"genres\": \"Action, Thriller\",\n    \"ageRestriction\": \"PG-13\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Create a new movie entry"
					},
					"response": []
				},
				{
					"name": "Create Media - Valid Series",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Media type is series\", function () {",
									"    pm.expect(jsonData.mediaType).to.equal(\"series\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Series {{$timestamp}}\",\n    \"description\": \"A test TV series\",\n    \"mediaType\": \"series\",\n    \"releaseYear\": 2023,\n    \"genres\": \"Drama, Comedy\",\n    \"ageRestriction\": \"TV-14\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Create a new series entry"
					},
					"response": []
				},
				{
					"name": "Create Media - Valid Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Media type is game\", function () {",
									"    pm.expect(jsonData.mediaType).to.equal(\"game\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Game {{$timestamp}}\",\n    \"description\": \"A test video game\",\n    \"mediaType\": \"game\",\n    \"releaseYear\": 2023,\n    \"genres\": \"RPG, Adventure\",\n    \"ageRestriction\": \"M\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Create a new game entry"
					},
					"response": []
				},
				{
					"name": "Create Media - Missing Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions title is required\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/title.*required/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Movie without title\",\n    \"mediaType\": \"movie\",\n    \"releaseYear\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to create media without title"
					},
					"response": []
				},
				{
					"name": "Create Media - Missing Media Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions media type\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/media.*type/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Movie\",\n    \"description\": \"Movie without type\",\n    \"releaseYear\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to create media without media type"
					},
					"response": []
				},
				{
					"name": "Create Media - Invalid Media Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions valid media types\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/movie.*series.*game/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Media\",\n    \"description\": \"Media with invalid type\",\n    \"mediaType\": \"podcast\",\n    \"releaseYear\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to create media with invalid type"
					},
					"response": []
				},
				{
					"name": "Create Media - Empty Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"description\": \"Media with empty title\",\n    \"mediaType\": \"movie\",\n    \"releaseYear\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to create media with empty title"
					},
					"response": []
				},
				{
					"name": "Create Media - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unauthorized Movie\",\n    \"description\": \"Should fail\",\n    \"mediaType\": \"movie\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media"
							]
						},
						"description": "Attempt to create media without authentication"
					},
					"response": []
				},
				{
					"name": "Get Single Media - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"mediaType\");",
									"    pm.expect(jsonData).to.have.property(\"creatorUsername\");",
									"    pm.expect(jsonData).to.have.property(\"averageRating\");",
									"    pm.expect(jsonData).to.have.property(\"totalRatings\");",
									"});",
									"",
									"pm.test(\"Response has ratings array\", function () {",
									"    pm.expect(jsonData).to.have.property(\"ratings\");",
									"    pm.expect(jsonData.ratings).to.be.an(\"array\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Get a specific media by ID"
					},
					"response": []
				},
				{
					"name": "Get Single Media - Non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions not found\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/not found|media.*not/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Attempt to get non-existent media"
					},
					"response": []
				},
				{
					"name": "Get Single Media - Invalid UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400 or 404 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/invalid-uuid-format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"invalid-uuid-format"
							]
						},
						"description": "Attempt to get media with invalid UUID"
					},
					"response": []
				},
				{
					"name": "Get Single Media - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Attempt to get media without authentication"
					},
					"response": []
				},
				{
					"name": "Update Media - Valid by Creator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"Title was updated\", function () {",
									"    pm.expect(jsonData.title).to.equal(requestBody.title);",
									"});",
									"",
									"pm.test(\"Description was updated\", function () {",
									"    pm.expect(jsonData.description).to.equal(requestBody.description);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Test Movie {{$timestamp}}\",\n    \"description\": \"Updated description\",\n    \"mediaType\": \"movie\",\n    \"releaseYear\": 2024,\n    \"genres\": \"Action, Drama\",\n    \"ageRestriction\": \"R\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Update media by its creator"
					},
					"response": []
				},
				{
					"name": "Update Media - Non-existent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Title\",\n    \"description\": \"Updated description\",\n    \"mediaType\": \"movie\",\n    \"releaseYear\": 2024\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Attempt to update non-existent media"
					},
					"response": []
				},
				{
					"name": "Update Media - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unauthorized Update\",\n    \"description\": \"Should fail\",\n    \"mediaType\": \"movie\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Attempt to update media without authentication"
					},
					"response": []
				},
				{
					"name": "Update Media - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"description\": \"Invalid update\",\n    \"mediaType\": \"invalidtype\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Attempt to update with invalid data"
					},
					"response": []
				},
				{
					"name": "Update Media - Partial Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Partially Updated Title\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Attempt partial update of media"
					},
					"response": []
				},
				{
					"name": "Update Media - By Non-Creator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This test requires a second user account",
									"// Skip if not set up"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This test requires another user's media ID",
									"// Expected: 403 Forbidden if trying to edit someone else's media"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Unauthorized Edit\",\n    \"description\": \"Trying to edit someone else's media\",\n    \"mediaType\": \"movie\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/media/019424bd-7801-7e84-97dc-9af96c7c08e9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"019424bd-7801-7e84-97dc-9af96c7c08e9"
							]
						},
						"description": "Attempt to update media created by another user (use existing media ID from database)"
					},
					"response": []
				},
				{
					"name": "Add Favorite - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message.toLowerCase()).to.match(/favorite|added|success/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}",
								"favorite"
							]
						},
						"description": "Add a media to favorites"
					},
					"response": []
				},
				{
					"name": "Add Favorite - Already Favorited",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions already in favorites\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/already.*favorite/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}",
								"favorite"
							]
						},
						"description": "Attempt to add already favorited media"
					},
					"response": []
				},
				{
					"name": "Add Favorite - Non-existent Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/00000000-0000-0000-0000-000000000000/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"00000000-0000-0000-0000-000000000000",
								"favorite"
							]
						},
						"description": "Attempt to favorite non-existent media"
					},
					"response": []
				},
				{
					"name": "Add Favorite - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/media/019424bd-7801-7e84-97dc-9af96c7c08e9/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"019424bd-7801-7e84-97dc-9af96c7c08e9",
								"favorite"
							]
						},
						"description": "Attempt to add favorite without authentication"
					},
					"response": []
				},
				{
					"name": "Add Favorite - Invalid Media ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400 or 404 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/invalid-uuid/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"invalid-uuid",
								"favorite"
							]
						},
						"description": "Attempt to favorite with invalid media ID"
					},
					"response": []
				},
				{
					"name": "Remove Favorite - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message.toLowerCase()).to.match(/removed|success/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}",
								"favorite"
							]
						},
						"description": "Remove a media from favorites"
					},
					"response": []
				},
				{
					"name": "Remove Favorite - Not In Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error mentions not in favorites\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/not.*favorite|favorite.*not/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}",
								"favorite"
							]
						},
						"description": "Attempt to remove media not in favorites"
					},
					"response": []
				},
				{
					"name": "Remove Favorite - Non-existent Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/00000000-0000-0000-0000-000000000000/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"00000000-0000-0000-0000-000000000000",
								"favorite"
							]
						},
						"description": "Attempt to remove favorite for non-existent media"
					},
					"response": []
				},
				{
					"name": "Remove Favorite - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/media/019424bd-7801-7e84-97dc-9af96c7c08e9/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"019424bd-7801-7e84-97dc-9af96c7c08e9",
								"favorite"
							]
						},
						"description": "Attempt to remove favorite without authentication"
					},
					"response": []
				},
				{
					"name": "Delete Media - By Creator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"    pm.expect(jsonData.message.toLowerCase()).to.match(/deleted|success/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Delete media by its creator"
					},
					"response": []
				},
				{
					"name": "Delete Media - Already Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/{{testMediaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"{{testMediaId}}"
							]
						},
						"description": "Attempt to delete already deleted media"
					},
					"response": []
				},
				{
					"name": "Delete Media - Non-existent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Attempt to delete non-existent media"
					},
					"response": []
				},
				{
					"name": "Delete Media - Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/media/019424bd-7801-7e84-97dc-9af96c7c08e9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"019424bd-7801-7e84-97dc-9af96c7c08e9"
							]
						},
						"description": "Attempt to delete media without authentication"
					},
					"response": []
				},
				{
					"name": "Delete Media - By Non-Creator",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Expected: 403 Forbidden when trying to delete someone else's media"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/019424bd-7801-7e84-97dc-9af96c7c08e9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"019424bd-7801-7e84-97dc-9af96c7c08e9"
							]
						},
						"description": "Attempt to delete media created by another user"
					},
					"response": []
				}
			],
			"description": "Media management endpoints with comprehensive positive and negative test cases"
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Health Check",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    pm.expect(jsonData).to.have.property(\"status\");",
							"});",
							"",
							"pm.test(\"Status is ok\", function () {",
							"    pm.expect(jsonData.status).to.equal(\"ok\");",
							"});",
							"",
							"pm.test(\"Response has service field\", function () {",
							"    pm.expect(jsonData).to.have.property(\"service\");",
							"    pm.expect(jsonData.service).to.be.a(\"string\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "Health check endpoint to verify API is running"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testMediaId",
			"value": "",
			"type": "string"
		}
	]
}