{
	"info": {
		"_postman_id": "c9b68415-7ddb-440f-b426-4c281bc8816d",
		"name": "Media Ratings Platform (MRP) Copy",
		"description": "Comprehensive API collection for testing the MRP REST endpoints with positive and negative test cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22837350"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register User - Valid Data",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"username\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									"pm.test(\"Response fields have correct types\", function () {",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.expect(jsonData.username).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Username matches request\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.username).to.equal(requestBody.username);",
									"});",
									"",
									"pm.test(\"ID is valid UUID format\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.id).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Success message is present\", function () {",
									"    pm.expect(jsonData.message).to.include(\"success\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser{{$timestamp}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user with valid username and password"
					},
					"response": []
				},
				{
					"name": "Register - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Missing Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register without providing a username"
					},
					"response": []
				},
				{
					"name": "Register - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Missing Password",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*required|required.*password/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register without providing a password"
					},
					"response": []
				},
				{
					"name": "Register - Short Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Short Username (less than 3 characters)",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions username length requirement\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*between.*3.*50|username.*3.*characters/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"ab\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with a username shorter than 3 characters"
					},
					"response": []
				},
				{
					"name": "Register - Short Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Short Password (less than 6 characters)",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions password length requirement\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*at least.*6|password.*6.*characters/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"validusername\",\n    \"password\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with a password shorter than 6 characters"
					},
					"response": []
				},
				{
					"name": "Register - Duplicate Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Duplicate Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions username already exists\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*already|already.*exists|duplicate/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with an existing username (testuser1 from init.sql)"
					},
					"response": []
				},
				{
					"name": "Register - Empty Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Empty Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates validation failure\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username|username.*between/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with an empty string as username"
					},
					"response": []
				},
				{
					"name": "Register - Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Register - Invalid JSON",
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response indicates error\", function () {",
									"    // Server should return an error for malformed JSON",
									"    pm.expect(pm.response.code).to.be.above(399);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"password123\"\n    // missing closing brace"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Attempt to register with malformed JSON"
					},
					"response": []
				},
				{
					"name": "Login - Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Login - Valid Credentials",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData).to.have.property(\"username\");",
									"    pm.expect(jsonData).to.have.property(\"userId\");",
									"    pm.expect(jsonData).to.have.property(\"message\");",
									"});",
									"",
									"pm.test(\"Response fields have correct types\", function () {",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.expect(jsonData.username).to.be.a(\"string\");",
									"    pm.expect(jsonData.userId).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});",
									"",
									"pm.test(\"Token is not empty\", function () {",
									"    pm.expect(jsonData.token.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Username matches request\", function () {",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.username).to.equal(requestBody.username);",
									"});",
									"",
									"pm.test(\"UserId is valid UUID format\", function () {",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(jsonData.userId).to.match(uuidRegex);",
									"});",
									"",
									"pm.test(\"Success message is present\", function () {",
									"    pm.expect(jsonData.message.toLowerCase()).to.include(\"success\");",
									"});",
									"",
									"// Save token to collection variable for future requests",
									"if (jsonData.token) {",
									"    pm.collectionVariables.set(\"authToken\", jsonData.token);",
									"    pm.collectionVariables.set(\"userId\", jsonData.userId);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with valid credentials (testuser1 from init.sql)"
					},
					"response": []
				},
				{
					"name": "Login - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Wrong Password",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates invalid credentials\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/invalid.*username.*password|invalid.*credentials|authentication.*failed/);",
									"});",
									"",
									"pm.test(\"No token is returned\", function () {",
									"    pm.expect(jsonData).to.not.have.property(\"token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with correct username but wrong password"
					},
					"response": []
				},
				{
					"name": "Login - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Invalid Username",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message indicates invalid credentials\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/invalid.*username.*password|invalid.*credentials|user.*not.*found/);",
									"});",
									"",
									"pm.test(\"No token is returned\", function () {",
									"    pm.expect(jsonData).to.not.have.property(\"token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nonexistentuser999\",\n    \"password\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with a username that doesn't exist"
					},
					"response": []
				},
				{
					"name": "Login - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Missing Username",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*required|required.*username/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login without providing a username"
					},
					"response": []
				},
				{
					"name": "Login - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Missing Password",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/password.*required|required.*password/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login without providing a password"
					},
					"response": []
				},
				{
					"name": "Login - Empty Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Empty Credentials",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has error field\", function () {",
									"    pm.expect(jsonData).to.have.property(\"error\");",
									"});",
									"",
									"pm.test(\"Error message mentions required fields\", function () {",
									"    pm.expect(jsonData.error.toLowerCase()).to.match(/username.*password.*required|required/);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with empty strings for both username and password"
					},
					"response": []
				},
				{
					"name": "Login - Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Login - Invalid JSON",
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Response time is less than 1500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test(\"Response indicates error\", function () {",
									"    // Server should return an error for malformed JSON",
									"    pm.expect(pm.response.code).to.be.above(399);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\"\n    \"password\": \"test123\"\n    // missing comma"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Attempt to login with malformed JSON"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints with comprehensive positive and negative test cases"
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Health Check",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    pm.expect(jsonData).to.have.property(\"status\");",
							"});",
							"",
							"pm.test(\"Status is ok\", function () {",
							"    pm.expect(jsonData.status).to.equal(\"ok\");",
							"});",
							"",
							"pm.test(\"Response has service field\", function () {",
							"    pm.expect(jsonData).to.have.property(\"service\");",
							"    pm.expect(jsonData.service).to.be.a(\"string\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "Health check endpoint to verify API is running"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		}
	]
}